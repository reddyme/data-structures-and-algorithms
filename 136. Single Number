136. Single Number

Given a non-empty array of integers, every element appears twice except for one. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,1]
Output: 1

Example 2:

Input: [4,1,2,1,2]
Output: 4


Solutions:

Time: O(nlogn)  Space: O(1)

class Solution {
    public int singleNumber(int[] nums) {
        Arrays.sort(nums);
        if(nums.length==1)
            return nums[0];
        int pointer1=0;
        int pointer2=1;
        while(pointer2<nums.length){
            if(nums[pointer1]!=nums[pointer2])
                return nums[pointer1];
            pointer1=pointer1+2;
            pointer2=pointer2+2;
        }
        return nums[pointer1];
    }
}

Time: O(n)  Space: O(n)

class Solution {
    public int singleNumber(int[] nums) {
        Map<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            map.put(nums[i],map.getOrDefault(nums[i],0)+1);
        }
        for(int key:map.keySet()){
            if(map.get(key)==1)
                return key;
        }
        return -1;
    }
}


Time O(n)  Space: O(1)


class Solution {
    public int singleNumber(int[] nums) {
        int target=0;
        for(int i:nums){
            target=target^i;
        }
        return target;
    }
}


