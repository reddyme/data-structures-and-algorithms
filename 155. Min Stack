155. Min Stack

Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

    push(x) -- Push element x onto stack.
    pop() -- Removes the element on top of the stack.
    top() -- Get the top element.
    getMin() -- Retrieve the minimum element in the stack.

 

Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2

 

Constraints:

    Methods pop, top and getMin operations will always be called on non-empty stacks.


Solutions:

Time: O(n)  Space: O(n)

class MinStack {

    /** initialize your data structure here. */
    Stack<Integer> stack=new Stack<>();
    Stack<Integer> minStack=new Stack<>();
    
    public MinStack() {
        
    }
    
    public void push(int x) {
        stack.push(x);
        // we could have duplicates so =
        if(minStack.isEmpty()||x<=minStack.peek()){
            minStack.push(x);
        }
    }
    
    public void pop() {
        
        if(stack.peek().equals(minStack.peek()))
            minStack.pop();
        stack.pop();
    }
    
    public int top() {
        return stack.peek();
    }
    
    public int getMin() {
        return minStack.peek();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */


Time: O(n)  Space: O(n)


class MinStack {

    /** initialize your data structure here. */
    Stack<Integer> stack;
    

    PriorityQueue<Integer> queue=new PriorityQueue<>();
    public MinStack() {
        stack=new Stack();
    }
    
    public void push(int x) {
        stack.push(x);
        queue.add(x);
    }
    
    public void pop() {
        int popValue=stack.pop();
        queue.remove(popValue);
    }
    
    public int top() {
        return stack.isEmpty()?-1:stack.peek();
    }
    
    public int getMin() {
        return queue.isEmpty()?-1:queue.peek();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
