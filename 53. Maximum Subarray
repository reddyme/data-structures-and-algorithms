53. Maximum Subarray

Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.


Solutions:

Time Complexity: O(n2)  Space: O(1)

class Solution {
    public int maxSubArray(int[] nums) {
        int target=Integer.MIN_VALUE;
        int sum;
        for(int i=0;i<nums.length;i++){
            sum=0;
            for(int j=i;j<nums.length;j++){
                sum+=nums[j];
                if(sum>target){
                    target=sum;
                }
            }
        }
        return target;
    }
}

Dynamic Programming: Kadane's Algorithm 
Time Complexity: O(n)  Space: O(n)

class Solution {
    public int maxSubArray(int[] nums) {
        // Problem says it contains atleast one number
        int runningSum[]=new int[nums.length];
        int target=nums[0];
        runningSum[0]=nums[0];
        for(int i=1;i<nums.length;i++){
            runningSum[i]=Integer.max(nums[i],runningSum[i-1]+nums[i]);
            if(runningSum[i]>target)
                target=runningSum[i];
        }
        
        return target;
    }
}

/*
runningSum [-2,1,-2,4,3,5,6,6,6]
max=6
*/


Dynamic Programming: Kadane's Algorithm 
Time Complexity: O(n)  Space: O(1)


class Solution {
    public int maxSubArray(int[] nums) {
        // Problem says it contains atleast one number
        int target=nums[0];
        for(int i=1;i<nums.length;i++){
            nums[i]=Math.max(nums[i],nums[i-1]+nums[i]);
            if(nums[i]>target)
                target=nums[i];
        }
        return target;
    }
}



